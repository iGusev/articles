<img align="left" src="https://habrastorage.org/files/0c0/7fe/7f5/0c07fe7f5b294fecb66c428fca14b406.jpg">
В нашей <a href="http://habrahabr.ru/post/267257/">предыдущей статье</a> мы говорили о преимуществах системы типов PHP 7, и в частности, о новой поддержке типизированных возвращаемых значений. Что само по себе является не только большим подспорьем в поддержке кода, но делает для PHP большой шаг вперед.

До сих пор мы говорили о типах только в отношении классов и интерфейсов. В течение многих лет мы только их (и массивы) и могли использовать. Однако же, PHP 7 добавляет возможность использовать и скалярные величины тоже, такие как <code>int</code>, <code>string</code> и <code>float</code>.

Но постойте. В PHP большинство примитивов являются взаимозаменяемыми. Мы можем передать <code>"123"</code> в функцию, которая хочет <code>int</code>, и довериться PHP, который все сделает "правильно". Так для чего же тогда нужны скалярные типы?<cut/>

Также как и типы возвращаемых значений, скаляры увеличивают ясность кода, дают возможность поймать больше ошибок на раннем этапе. Что, в свою очередь, повышает надежность кода.

PHP 7 добавляет четыре новых типа, которые могут быть заданы параметрами или возвращаемым значениям: <code>int</code>, <code>float</code>, <code>string</code> и <code>bool</code>. Они присоединятся к уже существующим <code>array</code>, <code>callable</code>, классам и интерфейсам. Давайте дополним наш предыдущий пример с учетом новой возможности:

<source lang="php">
interface AddressInterface {
  public function getStreet() : string;
  public function getCity() : string;
  public function getState() : string;
  public function getZip() : string;
}
</source>
<source lang="php">
class EmptyAddress implements AddressInterface {
  public function getStreet() : string { return ''; }
  public function getCity() : string { return ''; }
  public function getState() : string { return ''; }
  public function getZip() : string { return ''; }
}
</source>
<source lang="php">
class Address implements AddressInterface {
  protected $street;
  protected $city;
  protected $state;
  protected $zip;

  public function __construct(string $street, string $city, string $state, string $zip) {
    $this->street = $street;
    $this->city = $city;
    $this->state = $state;
    $this->zip = $zip;
  }

  public function getStreet() : string { return $this->street; }
  public function getCity() : string { return $this->city; }
  public function getState() : string { return $this->state; }
  public function getZip() : string { return $this->zip; }
}
</source>
<source lang="php">
class Employee {
  protected $id;
  protected $address;

  public function __construct(int $id, AddressInterface $address) {
    $this->id = $id;
    $this->address = $address;
  }

  public function getId() : int {
    return $this->id;
  }

  public function getAddress() : AddressInterface {
    return $this->address;
  }
}
</source>
<source lang="php">
class EmployeeRepository {
  private $data = [];

  public function __construct() {
    $this->data[123] = new Employee(123, new Address('123 Main St.', 'Chicago', 'IL', '60614'));
    $this->data[456] = new Employee(456, new Address('45 Hull St', 'Boston', 'MA', '02113'));
  }

  public function findById(int $id) : Employee {
    if (!isset($this->data[$id])) {
      throw new InvalidArgumentException('No such Employee: ' . $id);
    }

    return $this->data[$id];
  }
}
</source>
<source lang="php">
$r = new EmployeeRepository();

try {
  print $r->findById(123)->getAddress()->getStreet() . PHP_EOL;
  print $r->findById(789)->getAddress()->getStreet() . PHP_EOL;
}
catch (InvalidArgumentException $e) {
  print $e->getMessage() . PHP_EOL;
}
</source>
Изменения коснулись некоторых методов, отдающих строку или число. Даже сделав такой простой шаг, мы уже получили некоторые преимущества.

<ol>
<li>Теперь известно, что различные поля класса <code>Address</code> являются просто строками. Раньше можно было только предполагать, что они были строками, а не объектами <code>Street</code> (состоящими из номера улицы, ее названия и номера квартиры) или ID города из базы данных. Конечно, обе эти вещи совершенно разумны в определенных обстоятельствах, но в данной статье они не рассматриваются.</li>
<li>Известно, что идентификаторы сотрудников - целые числа. Во многих компаниях ID сотрудника является алфавитно-цифровой строкой или, возможно, номером с лидирующим нулем. Раньше не было способа узнать, теперь же иные трактовки исключены.</li>
<li>Плюсом является и безопасность. Мы гарантированно знаем, что внутри <code>findById()</code> <code>$id</code> - это значение типа <code>int</code>. Даже если оно изначально пришло из пользовательского ввода, оно станет целочисленным. Это означает, что оно не может содержать, например, SQL-инъекции. Опора на проверку типов при работе с пользовательским вводом не единственная, и даже не лучшая защита от нападения, но еще один слой защиты.</li>
</ol>
Кажется, что первые два преимущества избыточны при наличии документации. Если у вас есть хорошие doc-блоки в коде, вы уже знаете, что <code>Address</code> состоит из строк и ID сотрудника является целочисленным, верно? Это правда; однако, не все придерживаются фанатичности в вопросе документирования своего кода, или же просто забывают обновить ее. С "активной" информацией из самого языка вы гарантированно будете знать, что рассинхронизации нет, ведь PHP выбросит исключение, если это не так.

Явное указание типов также открывает двери к более мощным инструментам. Программы - либо сам PHP, либо инструменты для анализа от третьих лиц - могут изучать исходный код, находя возможные ошибки или возможности оптимизации на основании полученной информации.

Например, мы можем проверить, что следующий код является некорректным и всегда будет падать, даже без его запуска:

<source lang="php">
function loadUser(int $id) : User {
  return new User($id);
}
</source>
<source lang="php">
function findPostsForUser(int $uid) : array {
  // Obviously something more robust.
  return [new Post(), new Post()];
}
</source>
<source lang="php">
$u = loadUser(123);

$posts = findPostsForUser($u);
</source>
<code>loadUser()</code> всегда возвращает объект типа <code>User</code>, а <code>findPostsForUser()</code> всегда возвращает integer, нет никакой возможности сделать этот код верным. Об этом можно сказать лишь взглянув на функции и способ их использования. А это, в свою очередь, означает, что и IDE тоже знает заранее и может предупредить нас об ошибке до запуска. И поскольку IDE может отслеживать намного больше частей, чем мы, то она может и предупреждать о большем количестве ошибок, чем можно заметить самостоятельно... при этом не исполняя код!

Этот процесс называется "статический анализ", и он является невероятно мощным способом оценки программ с целью поиска и исправления ошибок. Этому немного мешает стандартная слабая типизация PHP. Передача целого числа в функцию, которая ожидает строку, или строку в функцию, ожидающую целое, все это продолжает работать и PHP молча конвертирует примитивы между собой, также как и всегда. Что делает статический анализ, нами или с помощью утилит, менее полезным. 

Введение режима строгой типизации является краеугольным камнем новой системы типов PHP 7.

По умолчанию, при работе со скалярными типами (параметрами или возвращаемыми значениями), PHP будет делать все возможное, чтобы привести значение к ожидаемому. То есть, передача <code>int</code> в функцию, ожидающую <code>string</code> будет прекрасно работать, а передавая <code>bool</code> при ожидаемом <code>int</code> вы получите целое число 0 или 1, потому что это естественное, ожидаемое от языка поведение. У объекта, переданного в функцию, ожидающую <code>string</code>, будет вызваться <code>__toString()</code>, тоже самое произойдет и с возвращаемыми значениями.

Единственным исключением является передача строки в ожидаемый <code>int</code> или <code>float</code>. Традиционно, когда функция рассчитывает получить значения <code>int</code>/<code>float</code>, а передается <code>string</code>, PHP просто будет обрезать строку до первого нечислового символа, в результате чего возможно потеря данных. В случае со скалярными типами, параметр будет работать нормально, если строка действительно является числовой, но если же значение будет усекаться, то это приведет к вызову <code>E_NOTICE</code>. Все будет работать, но на текущий момент такая ситуация рассматривается как незначительная ошибка в условии.

Авто-преобразование имеет смысл, в тех случаях, когда практически все входные данные передаются как строки (из базы данных или http-запросы), но в то же время оно ограничивает полезность проверки типов. Как раз для этого в PHP 7 предлагается <code>strict_types</code> режим. Его использование является несколько тонким и неочевидным, но при должном понимании разработчик получает невероятно мощный инструмент.

Чтобы включить режим строгой типизации, добавьте объявление в начало файла, вот так:

<source lang="php">
declare(strict_types=1);
</source>
Это объявление должно быть первой строкой в файле, до выполнения какого-либо кода. Оно затрагивает только логику, расположенную в файле и только <i>вызовы и возвращаемые значения</i> в этом файле. Чтобы понять как работает <code>strict_types</code>, давайте разобьем наш код на несколько отдельных файлов и немного его изменим:

<source lang="php">
// EmployeeRespository.php

class EmployeeRepository {

  private $data = [];

  public function __construct() {
    $this->data[123] = new Employee(123, new Address('123 Main St.', 'Chicago', 'IL', '60614'));
    $this->data[456] = new Employee(456, new Address('45 Hull St', 'Boston', 'MA', 02113));
  }

  public function findById(int $id) : Employee {
    if (!isset($this->data[$id])) {
      throw new InvalidArgumentException('No such Employee: ' . $id);
    }
    return $this->data[$id];
  }
}
</source>
<source lang="php">
// index.php

$r = new EmployeeRepository();

try {

  $employee_id = get_from_request_query('employee_id');

  print $r->findById($employee_id)->getAddress()->getStreet() . PHP_EOL;
}
catch (InvalidArgumentException $e) {
  print $e->getMessage() . PHP_EOL;
}
</source>
Что же можно гарантировать? Самое главное, мы наверняка знаем, что <code>$id</code> внутри <code>findById()</code> является <code>int</code>, а не строкой. Неважно, чем будет <code>$employee_id</code>, <code>$id</code> всегда примет тип <code>int</code>, даже если будет выброшен <code>E_NOTICE</code>. Если мы добавим декларацию <code>strict_type</code> в <code>EmployeeRepository.php</code>, то ничего не произойдет. Мы все также будем иметь <code>int</code> внутри <code>findById()</code>.

Однако, если объявить использование режима строгой типизации в <code>index.php</code>, а затем там же использовать вызов <code>findById()</code>, то в случае если <code>$employee_id</code> будет являться строкой, или <code>float</code> или чем-то другим кроме <code>int</code>, то это приведет к выбросу <code>TypeError</code>.

Другими словами, методы и функции будут затронуты строгой типизацией <b>только</b>, если они вызваны в соответствующе задекларированном файле. Код в любой другой части проекта не будет задет. Желание разработчиков библиотек следовать принципу строгой типизации не будет влиять именно на ваш код, только на их.

Так что же в этом хорошего? Проницательный читатель может заметить, что я сделал очень коварный баг в последнем примере кода. Проверьте конструктор <code>EntityRespository</code>, там где мы создаем наши фейковые данные. Вторая запись передает ZIP-код как int, не строку. Большую часть времени это не будет иметь никакого значения. Тем не менее, в США почтовые коды на северо-востоке начинаются именно с ведущего нуля. Если ваш <code>int</code> начинается с ведущего нуля, PHP будет интерпретировать это как восьмеричное число, то есть число с основанием 8.

При слабой типизации это означает, что в Бостоне адрес будет интерпретироваться не как zip-код 02113, а как целое число 02113, что по основанию 10 будет: 1099, вот его-то PHP и переведет в почтовый индекс "1099". Поверьте мне, жители Бостона ненавидят это. Такую ошибку в итоге можно отловить где-то в базе или при валидации, когда код принудительно заставит ввести именно шестизначное число, но в тот момент вы и понятия не будете иметь откуда пришло 1099. Может быть позднее, часов через 8 отладки, будет понятно.

Вместо этого, мы переключим <code>EntityRespository.php</code> в strict-режим и сразу же поймаем несоответствие типов. Если запустить код, то получим вполне конкретные ошибки, которые скажут нам точные строки, где их искать. А хорошие утилиты (либо IDE) могут поймать их еще до запуска!

Единственное место, где режим строгой типизации позволяет автоматические преобразования - из <code>int</code> в <code>float</code>. Это безопасно (кроме случаев с экстремально большими или малыми значениями, когда есть последствия переполнения) и логично, поскольку это <code>int</code> по определению также является и значением с плавающей точкой.

Когда же мы должны использовать строгую типизацию? Мой ответ прост: как можно чаще. Скалярная типизация, типы возвращаемых значений и strict-mode предлагают огромные преимущества для дебаггинга и поддержки кода. Все они должны использоваться максимально, и как результат, будет более надежный, поддерживаемый и безглючный код.

Исключением из этого правило может быть код, который напрямую взаимодействует с каналом входных данных, таким как базы данных или входящие http-запросы. В этих случаях входные данные собираются всегда быть строками, потому что работа в интернете это просто более проработанный способ конкатенации строк. При ручной работе с http или БД можно переводить данные из строк в необходимые типы, но обычно это выливается в большое количество ненужной работы; если SQL-поле имеет тип <code>int</code>, то вы знаете (даже если не знает IDE), что из него будет всегда отдаваться числовая строка и, следовательно, сможете быть уверены в безопасности и отсутствии потерь данных при передаче их в функцию, ожидающую <code>int</code>.

Это означает, что в нашем примере <code>EmployeeRespository</code>, <code>Employee</code>, <code>Address</code>, <code>AddressInterface</code> и <code>EmptyAddress</code> должны иметь включенный strict-режим. <code>index.php</code> же взаимодействует с входящими запросами (через вызов <code>get_from_request_query()</code>), и таким образом, вероятно, легче будет доверить PHP разбираться с типами, а не делать это вручную самостоятельно. Как только неопределенные значения из запроса передадутся в типизированную функцию, тогда-то и можно переключаться в строготипизированную работу.

Будем надеяться, что переход на PHP 7 будет намного быстрее, чем как это было с PHP 5. Это действительно стоит того. Одной из главных причин как раз и является расширенная система типов, дающая нам возможность сделать код более самодокументированны и более понятным друг другу и нашим инструментам. В результате получится намного меньше "хммм, я даже и не знаю что с этим делать" моментов, чем когда-либо прежде.