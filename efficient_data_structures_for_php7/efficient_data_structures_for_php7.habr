PHP имеет всего одну структуру данных для управления всем. <code>array</code> - сложный, гибкий, гибридный, сочетает в себе поведение <code>list</code> и <code>linked map</code>. Но мы используем его для всего, потому что PHP придерживается <b>прагматичного подхода</b>: иметь предельно правильный, здравый и реалистичный способ решения проблемы, исходящий из практических, а не теоретических рассуждений. <code>array</code> позволяет делать работу, хотя о нем и так много рассказывают на лекциях по информатике. Но, к сожалению, с гибкостью приходит и сложность.

Последний релиз PHP вызвал большое оживление в сообществе. Мы не могли дождаться того, чтобы начать использовать <a href="http://php.net/manual/en/migration70.new-features.php">новые возможности</a> и почувствовать вкус <a href="https://www.reddit.com/r/PHP/comments/3q2brz/how_is_php_7_twice_as_fast/">~2х прироста производительности</a>. Одна из причин, почему это случилось - <a href="https://nikic.github.io/2014/12/22/PHPs-new-hashtable-implementation.html">структура <code>array</code> была переработана</a>. Но массивы все также придерживаются принципа "оптимизировано для всего; оптимизировано для ничего", еще не все идеально, есть возможности для совершенствования.

<blockquote>А что насчет <a href="http://php.net/manual/en/spl.datastructures.php">структур данных SPL?</a></blockquote>К сожалению... они ужасны. Раньше, до PHP7, они предлагали _некоторые_ преимущества, но сейчас мы дошли до точки, когда использование SPL не имеет практического смысла.

<blockquote>Почему мы не можем просто поправить и улучшить их?</blockquote>Да, мы могли бы, но я считаю, что их дизайн и реализация настолько бедны, что лучше бы найти более современную замену.
<blockquote><b><i>"SPL data structures are horribly designed."</i></b>
— <i>Anthony Ferrara</i>
</blockquote>
<hr/><b>Введение</b>: <code>php-ds</code> - расширение для PHP7, добавляющее структуры данных. Этот пост кратко охватывает поведение, производительность и преимущества каждой из них. Также в конце вы найдете список ответов на ожидаемые вопросы.

<b>Github</b>: <a href="https://github.com/php-ds">https://github.com/php-ds</a>
<b>Пространство имен:</b> <code>Ds\</code>
<b>Интерфейсы:</b> <code>Collection</code>, <code>Sequence</code>, <code>Hashable</code>
<b>Классы:</b> <code>Vector</code>, <code>Deque</code>, <code>Stack</code>, <code>Queue</code>, <code>PriorityQueue</code>, <code>Map</code>, <code>Set</code>
<cut /><hr/>
<h2>Collection <i>(Коллекция)</i></h2>
<code>Collection</code> - это базовый интерфейс, охватывающий общую функциональность: <code>foreach</code>, <code>echo</code>, <code>count</code>, <code>print_r</code>, <code>var_dump</code>, <code>serialize</code>, <code>json_encode</code>, и <code>clone</code>.

<h2>Sequence <i>(Последовательность)</i></h2>
<code>Sequence</code> описывает поведение элементов, организованных в единый, линейный размер. В некоторых языках такая структура назвается <code>List</code> <i>(список)</i>. Подобен <code>array</code>, который использует инкрементальные ключи, за исключением некоторых особенностей:

<ul><li>Значения <b>всегда</b> должны быть индексированы как <code>[0, 1, 2, …, size - 1]</code></li>
<li>Извлечение или добавление приводит к обновление индекса всех последовательных значений</li>
<li>Поддерживает доступ к значениям только из индекса <code>[0, size - 1]</code></li></ul>
<h4>Варианты использования</h4>
<ul>
<li>Везде, где вы бы хотели использовать <code>array</code> как список (без ключей)</li>
<li>Более эффективная альтернатива <code>SplDoublyLinkedList</code> и <code>SplFixedArray</code></li>
</li></ul>
<h2>Vector <i>(Вектор)</i></h2>
<code>Vector</code> представляет собой <code>Sequence</code>, объединяющую значения в непрерывный буфер, увеличивающийся и уменьшающийся автоматически. Это наиболее эффективная последовательная структура данных, поскольку индекс элемента является прямым отражением его индекса в буфере, и увеличение вектора никак не повлияет на производительность.
<video>https://player.vimeo.com/video/154438958</video>
<h4>Сильные стороны</h4>
<ul>
<li>Очень маленькое потребление памяти</li>
<li>Очень быстрые итерации</li>
<li><code>get</code>, <code>set</code>, <code>push</code> и <code>pop</code> имеют сложность <code>O(1)</code></li>
</ul>
<h4>Недостатки</h4>
<ul>
<li><code>insert</code>, <code>remove</code>, <code>shift</code> and <code>unshift</code> имеют сложность <code>O(n)</code></li>
</ul>
<blockquote>Структурой номер один в Photoshop были Вектора.
— <b>Sean Parent</b>, <a href="https://youtu.be/sWgDk-o-6ZE?t=21m52s">CppCon 2015</a>
</blockquote>
<h2>Deque <i>(Двусвязная очередь)</i></h2>
<code>Deque</code> (произносится как "deck") - это последовательность значений, объединенных в непрерывный буфер, увеличивающийся и уменьшающийся автоматически. Название является общепринятым сокращением от <i>"double-ended queue"</i>. Используется внутри <code>Ds\Queue</code>.

Два указателя используется для отслеживания головы и хвоста. Наличие указателей позволяет изменять конец и начало буфера без необходимости перемещать другие элементы для освобождения места. Это делает <code>shift</code> и <code>unshift</code> настолько быстрым, что даже <code>Vector</code> не может конкурировать с этим.

Доступ к значению по индексу требует вычисления соответствующей позиции в буфере: <code>((head + position) % capacity)</code>.
<video>https://player.vimeo.com/video/154438012</video>
<h4>Сильные стороны</h4>
<ul>
<li>Очень маленькое потребление памяти</li>
<li><code>get</code>, <code>set</code>, <code>push</code>, <code>pop</code>, <code>shift</code> и <code>unshift</code> имеют сложность <code>O(1)</code></li>
</ul>
<h4>Недостатки</h4>
<ul>
<li><code>insert</code>, <code>remove</code> имеют сложность <code>O(n)</code></li>
<li>Емкость буфера должна иметь степень двойки (<code>2ⁿ</code>)</li>
</ul>
Следующий бенчмарк показывает общее затраченное время и память, используемую для операции <code>push</code> 2ⁿ случайных чисел. <code>array</code>, <code>Ds\Vector</code> и <code>Ds\Deque</code> отрабатывают быстро, но <code>SplDoublyLinkedList</code> стабильно показывает результат <b>более чем в 2 раза хуже</b>.

<code>SplDoublyLinkedList</code> выделяет память для каждого значения по отдельности, поэтому и происходит ожидаемый рост по памяти. <code>array</code> и <code>Ds\Deque</code> при своей реализации выделяют память порционно для поддержания достаточного объема для 2ⁿ элементов. <code>Ds\Vector</code> имеет фактор роста 1.5, что влечет за собой увеличение количества выделений памяти, но меньший расход в целом.
<img src="https://habrastorage.org/files/2ba/dcd/509/2badcd509c714317be94608dc14e3756.gif"/>
<img src="https://habrastorage.org/files/1d6/1b5/5a0/1d61b55a0b5745ed9ced6bd6de23cca8.gif"/>
Следующий бенчмарк показывает время, затраченное на <code>unshift</code> <b>единственного элемента</b> в последовательности значений размером 2ⁿ. Время, требующееся на установку значений не учитывается.

На графике видно, что <code>array_unshift</code> имеет сложность <code>O(n)</code>: всякий раз, когда объем выборки удваивается, растет и время, необходимое для <code>unshift</code>. Это объясняется тем, что каждый числовой показатель в диапазоне <code>[1, size - 1]</code> должен быть обновлен.
<img src="https://habrastorage.org/files/196/721/612/1967216121354a8a80018e7ffe0f4dd1.gif"/>
Но и <code>Ds\Vector::unshift</code> также <code>O(n)</code>, так почему же он намного быстрее? Имейте ввиду, что <code>array</code> хранит каждое значение в <code>bucket</code> вместе с его ключем и хэшем. Поэтому приходится проверять каждый элемент и обновлять хэш, если индекс является числовым. На самом деле <code>array_unshift</code> выделяет новый массив для этого и заменяет старый, когда все значения скопированы.

В векторе же индекс значения - это прямое отображение его индекса в буфере, поэтому все, что нам нужно сделать - сдвинуть каждое значение в диапазоне [1, size - 1] вправо на одну позицию. Делается это при помощи всего одной операции <code>memmove</code>.

<code>Ds\Deque</code> и <code>SplDoublyLinkedList</code> в свою очередь очень быстры, потому что на время для <code>unshift</code> значения не влияет размер выборки, т.е. его сложность будет <code>O(1)</code>.

На следующем тесте видно сколько памяти используется при 2ⁿ <code>pop</code> операций. Другими словами при изменении размера от 2ⁿ до нуля

Интересно тут то, что <code>array</code> всегда держит выделенную память, даже если его размер существенно уменьшается. <code>Ds\Vector</code> and <code>Ds\Deque</code> позволяют в два раза уменьшить выделяемые ресурсы, если их размер падает ниже четверти своего текущего потенциала. <code>SplDoublyLinkedList</code> освобождает память после каждого удаления из выборки, поэтому мы можем наблюдать линейное снижение.
<img src="https://habrastorage.org/files/368/17e/ec9/36817eec937046e3a12ae8b9c5d2ecad.gif"/>
<h2>Stack <i>(Стек)</i></h2>
<a href="https://ru.wikipedia.org/wiki/%D0%A1%D1%82%D0%B5%D0%BA">Стек</a> - является коллекцией, организованной по принципу <i>"последним пришёл — первым вышел"</i> или <i>"LIFO" (last in — first out)</i>, позволяющей получить доступ только к значению на вершине структуры. Вы можете думать о нем как об <a href="https://upload.wikimedia.org/wikipedia/commons/6/6c/Single_row_box_magazine.svg">оружейном магазине</a> с динамической емкостью.

<code>Ds\Stack</code> использует внутри себя <code>Ds\Vector</code>.

<code>SplStack</code> наследуется от SplDoublyLinkedList, поэтому производительность будет эквивалентна сравнению <code>Ds\Vector</code> to <code>SplDoublyLinkedList</code> из предыдущих тестов. Посмотрим на время, необходимое для выполнения 2ⁿ <code>pop</code>-операций, изменения размера от 2ⁿ до нуля.
<img src="https://habrastorage.org/files/949/501/6ea/9495016ea23647cbb0907c275e97e337.gif"/>
<h2>Queue <i>(Очередь)</i></h2>
<a href="https://ru.wikipedia.org/wiki/Очередь_(программирование)">Очередь</a> - тип данных с парадигмой доступа к элементам <i>"первый пришел — первый вышел"</i> <i>("FIFO", "First In — First Out")</i>. Такая коллекция позволяет получить доступ к элементам в порядке их добавления. Ее название говорит само за себя, представьте себе структуру как линию людей, стоящих в очереди на кассу в магазине.

<code>Ds\Queue</code> использует внутри себя <code>Ds\Deque</code>. <code>SplQueue</code> наследуется от <code>SplDoublyLinkedList</code>, поэтому производительность будет эквивалентна сравнению <code>Ds\Deque</code> с <code>SplDoublyLinkedList</code>, показанному в предыдущем бенчмарке.

<h2>PriorityQueue <i>(Очередь с приоритетом)</i></h2>
Очередь с приоритетом очень похожа на простую очередь. Элементы помещаются в очередь с указанным приоритетом и значение с наивысшим приоритетом всегда будет в передней части. Прямой перебор очереди с приоритетом очень деструктивен, это будет последовательный вызов операций <code>pop</code>, что является очень затратной операцией.

Реализация очереди с приоритетом использует <i>max-heap</i>.

Принцип <i>"первый пришел — первый вышел"</i> сохраняется для значений с одинаковым приоритетом, так что группа значений с равным приоритетом можно рассматривать как обычную очередь.

А что же с производительностью? Следующий бенчмарк показывает время и память, требующиеся для операции <code>push</code> 2ⁿ случайных чисел со случайным приоритетом в очередь. Те же случайные числа будут использоваться для каждого из тестов. В тесте для <code>Queue</code> также генерируется случайный приоритет, хотя он и не используется.

Это, наверное, самый значимый из всех бенчмарков. <code>Ds\PriorityQueue</code> работает <b>более чем в два раза быстрее</b> чем <code>SplPriorityQueue</code> и использует только <b>5%</b> от его памяти - это в <b>20 раз более эффективное решение по памяти</b>.

Но как? Как может получиться настолько большая разница, когда <code>SplPriorityQueue</code> использует аналогичную внутреннюю структуру? Все сводится к тому, как хранятся значения в паре с приоритетом. <code>SplPriorityQueue</code> позволяет использовать любой тип значения для использования в качестве переменной, это приводит к тому, что в каждой паре приоритет занимает <b>32 байта</b>.

<code>Ds\PriorityQueue</code> поддерживает только целочисленные приоритеты, поэтому каждой паре выделяется <b>24 байта</b>. Но это все еще недостаточная разница для объяснения результата.

Если вы посмотрите на <a href="http://lxr.php.net/xref/PHP_7_0/ext/spl/spl_heap.c#629">исходный код <code>SplPriorityQueue::insert</code></a>, то заметите, что он <b>инициализирует массив</b> для <b>хранения пары значение-приоритет</b>.

Т.к. массив имеет минимальную емкость 8, то для каждой пары на самом деле выделяется <code>zval + HashTable + 8 * (Bucket + hash) + 2 * zend_string + (8 + 16) byte string payloads</code> <i>=</i> <code>16 + 56 + 36 * 8 + 2 * 24 + 8 + 16</code> <i>=</i> <i><b>432 байта</b></i> (64 бит).

<h4>"Так… почему же массив?"</h4>
<code>SplPriorityQueue</code> использует ту же внутреннюю структуру <code>SplMaxHeap</code>, которая требует от значения быть типом <code>zval</code>. Очевидный (но неэффективный) способ создания <code>zval</code>-пары, т.к. <code>zval</code> сам используется как <code>array</code>.
<img src="https://habrastorage.org/files/919/64d/c52/91964dc52a0f4de4b17e034efc27a363.gif"/>
<img src="https://habrastorage.org/files/e1c/76b/bde/e1c76bbde06341c8966449e94c918723.gif"/>
<h2>Hashable</h2>
Интерфейс, позволяющий объектам <b>быть использованными в качестве ключей</b>. Это альтернатива <code>spl_object_hash</code>, который детерминирует объект в хэш, базирующийся на его <code>handle:</code>. Это означает, что два объекта, которые считались бы равными при сравнении, не имели бы равный хэш, т.к. они не являются одним и тем же экземпляром.

<code>Hashable</code> вводит только два метода: <code>hash</code> и <code>equals</code>. Многие другие языки поддерживают это изначально: в Java - <code>hashCode</code> и <code>equals</code>, или в Python <code>___hash___</code> и <code>__eq__</code>. Было несколько RFC, добавляющих подобное поведение и в PHP, но ни один из не был принят.

Все структуры, будут возвращать <code>spl_object_hash</code>, если ключи объектов, хранящиеся в них не реализуют в себе <code>Hashable</code>.

Структуры данных, работающие с интерфейсом <code>Hashable</code>: <code>Map</code> и <code>Set</code>.

<h2>Map <i>(Ассоциативный массив)</i></h2>
<code>Map</code> является последовательной коллекцией пар ключ-значение, практически идентичной <code>array</code> в аналогичном контексте. <b>Ключи могут быть любого типа</b>, единственное условие - уникальность. При повторном добавлении ключа значения заменяются.

Как и в <code>array</code>, порядок вставки сохраняется.

<h4>Сильные стороны</h4>
<ul>
<li>Производительность и эффективность использования памяти <b>практически идентичны</b> <code>array</code></li>
<li>Автоматическое освобождение памяти при уменьшении размера</li>
<li>Ключи и значения могут быть любого типа, включая объекты</li>
<li>Поддерживает работу с объектами, реализующими интерфейс <code>Hashable</code></li>
<li><code>put</code>, <code>get</code>, <code>remove</code> и <code>containsKey</code> имеют сложность <code>O(1)</code></li>
</ul>
<h4>Недостатки</h4>
<ul>
<li>Не может быть преобразован в <code>array</code> при наличии ключей-объектов</li>
<li>Нет возможности получить доступ к значениям по индексу (позиции)</li>
</ul>
Следующий бенчмарк показывает, что производительности и эффективности по памяти между <code>array</code> и <code>Ds\Map</code> идентичны. Однако, <code>array</code> всегда будет держать выделенную память, когда <code>Ds\Map</code>, в свою очередь, освободит память при падении размера ниже четверти своего потенциала.
<img src="https://habrastorage.org/files/90f/7b8/bca/90f7b8bca4014552bc5cc22f069f0ce4.gif"/>
<img src="https://habrastorage.org/files/114/3a8/3fd/1143a83fd94946f09d02afb4299db7dc.gif"/>
<h2>Set <i>(Множество)</i></h2>
<code>Set</code> - коллекция <b>уникальных значений</b>. Учебники скажут вам, что в структуре <code>Set</code> значения неупорядочены, если реализация не предусматривает иное. Возьмем для примера Java, <code>java.util.Set</code> - это интерфейс с двумя основными реализациями: <code>HashSet</code> и <code>TreeSet</code>. <code>HashSet</code> обеспечивает сложность <code>O(1)</code> для <code>add</code> и <code>remove</code>, a <code>TreeSet</code> обеспечивает сортированный набор данных, но сложность <code>add</code> и <code>remove</code> возрастает до <code>O(log n)</code>.

<code>Set</code> использует ту же внутреннюю структуру, что и <code>Map</code>, также основываясь на <code>array</code>. Это означает, что <code>Set</code> может быть отсортирован за время <code>O(n * log(n))</code> когда это понадобится, в остальном он такой же простой как <code>Map</code> и <code>array</code>.
<video>https://player.vimeo.com/video/154441519</video>
<h4>Сильные стороны</h4>
<ul>
<li><code>add</code>, <code>remove</code> и <code>contains</code> имеют сложность <code>O(1)</code></li>
<li>Поддерживает работу с объектами, реализующими интерфейс <code>Hashable</code></li>
<li>Поддерживает <b>любой тип значений</b> (<code>SplObjectStorage</code> поддерживает только объекты).</li>
<li>Имеет эквивалент поразрядных логических операций (<code>intersection</code>, <code>difference</code>, <code>union</code>, <code>exclusive or</code>)</li>
</ul>
<h4>Недостатки</h4>
<ul>
<li>Не поддерживает <code>push</code>, <code>pop</code>, <code>insert</code>, <code>shift</code> или <code>unshift</code></li>
<li><code>get</code> имеет сложность <code>O(n)</code> если есть удаленные значения до момента индексации, в ином случае - <code>O(1)</code></li>
</ul>
Следующий бенчмарк показывает время, затраченное на добавление 2ⁿ новых экземпляров <code>stdClass</code>. Он показывает, что <code>Ds\Set</code> <b>немного быстрее</b>, чем <code>SplObjectStorage</code>, и использует <b>примерно в половину меньше</b> памяти.
<img src="https://habrastorage.org/files/7a8/47b/83e/7a847b83efb341d38831d423cbbefd87.gif"/>
<img src="https://habrastorage.org/files/3bc/ff9/3c7/3bcff93c73524f78ad59d0149dc91b68.gif"/>
Распространенным способом создания массива с уникальными значениями является <code>array_unique</code>, который создает новый <code>array</code>, содержащий только уникальные значения. Но важно иметь ввиду, что <b>значения в массиве не индексируются</b>, <code>in_array</code> является линейным поиском со сложность <code>O(n)</code>. <code>array_unique</code> работает только со значениями, без учета ключей, каждая проверка на наличие значения массива - линейный поиск, что даем нам в сумме сложность <code>O(n²)</code> по времени и <code>O(n)</code> по потреблению памяти.
<img src="https://habrastorage.org/files/0fa/3de/a2d/0fa3dea2d045418b88fc30060b186764.gif"/>
<h2>Ответы на ожидаемые вопросы и мнения</h2>
<h4>Есть ли тесты?</h4>
Сейчас около <b>2600 тестов</b>. Вполне возможно, что некоторые тесты являются избыточными, но я предпочел бы косвенно проверить одну и ту же вещь дважды, чем не проверять совсем.

<h4>Документация? Справочник по API?</h4>
На момент написания этой статьи пока еще нет полной документации, но она появится вместе с первым стабильным релизом.

Однако, существуют некоторые <a href="https://github.com/php-ds/ds/tree/master/php/include"><b>хорошо документированные файлы-заглушки</b></a>.

<h4>Можем ли мы посмотреть как устроены бенчмарки? Есть что-то о них?</h4>
Все бенчмарки прогонялись на стандартном билде <code>PHP 7.0.3</code> на <b>2015 Macbook Pro</b>. Результаты могут отличаться в зависимости от версии и платформы.

<h4>Почему <code>Stack</code>, <code>Queue</code>, <code>Set</code> и <code>Map</code> - не интерфейсы?</h4>
Я не верю, что есть необходимость в какой-либо альтернативной реализации. 3 интерфейса и 7 классов - это хороший баланс между прагматизмом и специализацией.

<h4>Когда мне использовать <code>Deque</code> вместо <code>Vector</code>?</h4>
Если вы <b>точно</b> знаете, что не будете использовать <code>shift</code> и <code>unshift</code>, используйте <code>Vector</code>. Для удобного тайпхинтинга можно указать в качестве типа <code>Sequence</code>.

<h4>Почему все классы являются финализированными?</h4>
Дизайн API <code>php-ds</code> применяет парадигму <a href="https://en.wikipedia.org/wiki/Composition_over_inheritance">"Composition over inheritance</a>.

Структуры SPL являются хорошим примером того, как наследование может быть использовано не по назначение. Например, <code>SplStack</code> расширяет <code>SplDoublyLinkedList</code>, который поддерживает произвольный доступ по индексу, <code>shift</code> и <code>unshift</code> - так что технически это не <a href="https://ru.wikipedia.org/wiki/%D0%A1%D1%82%D0%B5%D0%BA">Стек</a>.

Фреймворк Java-коллекций также имеет несколько интересных случаев, когда наследование порождает двусмысленность. <code>ArrayDeque</code> имеет три метода добавления элементов: <code>add</code>, <code>addLast</code> и <code>push</code>. Это не плохо, т.к. <code>ArrayDeque</code> имплементирует <code>Deque</code> и <code>Queue</code>, что объясняет одновременное наличие <code>addLast</code> и <code>push</code>. Однако, все три метода сразу, делающие одно и тоже, вызывают  путаницу и непоследовательность.

Старый <code>java.util.Stack</code> расширял <code>java.util.Vector</code>, тем самым заявляя, что "более полный и последовательный набор операций LIFO обеспечивается интерфейсом <code>Deque</code> и его реализациями", но <code>Deque</code> включает в себя методы <code>addFirst</code> и <code>remove(x)</code>, которые не должны быть часть <code>stack</code> структуры по API.

<h4>Просто потому, что эти структуры имеют непересекающиеся методы не значит, что мы не можем так делать.</h4>
На самом деле, это справедливое замечание, но я по-прежнему считаю, что композиция больше подходит для построения структур данных. Они предназначены быть самодостаточными, подобно <code>array</code>. Вы не можете отнаследоваться от <code>array</code>, он вынуждает вас разрабатывать собственные API вокруг себя, используя его только для хранения фактических данных.

Наследование также вызвало бы лишние сложности во внутренней реализации.

<h4>Зачем нужен еще и <code>ds</code> класс в глобальном пространстве имен?</h4>
Он обеспечивает альтернативный синтаксис:
<img src="https://habrastorage.org/files/8c7/7d6/06b/8c77d606b90f41c589e1b7427ada159c.gif"/>
<h4>Почему нет связного списка <i>(Linked List)</i>?</h4> 
Класс <code>LinkedList</code> на самом деле появился первым, это казалось хорошим стартом. Но в итоге я решил удалить его, когда понял, что он не сможет конкурировать с <code>Vector</code> или <code>Deque</code> при любом раскладе. Две основные причины возможной поддержки: <b>распределение накладных расходов</b> и <b>локальность ссылок</b>.

В связном списке мы добавляем или убираем зарезервированную память для элемента структуры <i>(node)</i> всякий раз, когда значение добавляется или удаляется. Нода содержит в себе два указателя (в случае с двусвязным списком), чтобы ссылаться на предыдущую и последующую ноды. Обе структуры, <code>Vector</code> и <code>Deque</code>, выделяют буфер памяти заранее, поэтому нет необходимости делать это настолько часто. Они также не нуждаются в дополнительных указателях, чтобы знать какое значение до и какое после, тем самым снижаются накладные расходы.

<h4>Будет ли связный список использовать меньше памяти, т.к. там нет буфера?</h4>
Только когда коллекция очень мала. Верхней границей количества памяти для <code>Vector</code> будет <code>(1.5 * (size - 1)) * zval</code> байт, не менее *10 * zval*. В двусвязном списке же будет использоваться <code>(size * (zval + 8 + 8))</code>. Поэтому связный список будет использовать меньше памяти, чем <code>Vector</code> только тогда, когда его размер меньше 6 элементов.

<h4>Окей... связный список использует больше памяти, но почему он медленный?</h4>
Узлы <i>связного списка</i> обладают плохой <b><i>пространственной локальность</i></b>. Это означает, что физическое расположение узла в памяти может быть далеко от прилегающих узлов. Таким образом итерации по связному списку скачут по памяти вместо использования кэша процессора. Значительное преимущество <code>Vector</code> и <code>Deque</code>: элементы физически находятся рядом друг с другом.

<blockquote>"Несмежность данных в структурах является корнем всех зол производительности. Конкретно, пожалуйста, скажите нет связным спискам"
"Нет почти ничего вреднее из того что вы можете сделать чтобы убить все плюсы современных микропроцессоров, чем использовать связный список"
— Chandler Carruth (<a href="https://youtu.be/fHNmRkzxHWs?t=34m42s">CppCon 2014</a>)</blockquote>
<h4>PHP - это язык для веб-разработки — производительность не важна.</h4>
<b>Производительность не должна быть вашим главным приоритетом</b>. Код должен быть последовательным, ремонтопригодным, надежным, предсказуемым, безопасным и легко понимаемым. Но это не означает, что производительность <i>"не важна"</i>.

Мы тратим много времени, пытаясь уменьшить размер своих ассетов, делаем сравнительный анализ фреймворков и придумываем бессмысленные микро-оптимизации:

<ul>
<li><a href="http://fabien.potencier.org/print-vs-echo-which-one-is-faster.html">print vs echo, which one is faster?</a></li>
<li><a href="http://fabien.potencier.org/the-php-ternary-operator-fast-or-not.html">The PHP Ternary Operator: Fast or not?</a></li>
<li><a href="http://www.phpbench.com/">The PHP Benchmark: setting the record straight</a></li>
<li><a href="https://nikic.github.io/2012/01/09/Disproving-the-Single-Quotes-Performance-Myth.html">Disproving the Single Quotes Performance Myth</a></li>
</ul>
Но в конечном итоге двухкратный прирост производительности, который приносит с собой PHP7 почему-то всех взбудоражил. Абсолютно для всех это - одно из главных преимуществ для перехода с PHP5.

Эффективный код позволяет снизить нагрузку на наши сервера. уменьшить время ответа наших API и веб-страниц и снижает время работы наших утилит для разработки. <b>Высокая производительность важна</b>, но поддерживаемость кода все же стоит во главе.
<hr/>
💬 <b>Обсуждения</b>: <a href="https://twitter.com/rudi_theunissen">Twitter</a>, <a href="https://www.reddit.com/r/PHP/comments/44qsco/efficient_data_structures_for_php_7/">Reddit</a>, <a href="http://chat.stackoverflow.com/rooms/11/php">Room 11</a>
🔎 <b>Исходный код</b>: <a href="https://github.com/php-ds">github.com/php-ds</a>
📊 <b>Бенчмарки:</b> <a href="https://github.com/php-ds/benchmarks">github.com/php-ds/benchmarks</a>