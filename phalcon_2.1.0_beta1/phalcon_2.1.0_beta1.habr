Мы рады представить вам первый бета-релиз <b>Phalcon 2.1</b>!

Релизы 2.1.x будут поддерживаться в течении более длительного периода, 2.1 будет нашей первой версией с долгострочной поддержкой (<a href="https://en.wikipedia.org/wiki/Long-term_support">LTS</a>).

В 2.0.x мы ввели несколько новых фич и поправили множество багов. Однако, наше внимание всегда было обращено на сохранение обратной совместимости с Phalcon 1.3.x, в то же время мы стимулировали разработчиков обновляться до 2.0.x. Это дало достаточно времени разработчикам на внесение изменений в свои приложения для работы с новой веткой.

Phalcon 2.1 предоставляет новые возможности, некоторые из которых несовместимы с предыдущими версиями, поэтому убедитесь, что вы проверили свои приложения перед обновлением production-систем.

Мы уверены, что изменения в этом релизе оправдают обновление :)<habracut/>

<h4>Окончание поддержки PHP 5.3</h4>
Phalcon 2.0.x - последняя серия релизов с поддержкой PHP 5.3 (>= 5.3.21). Из-за этого ограничения мы не можем включать некоторые улучшения производительности в фреймворк.

С версии 2.1.x мы настоятельно реккомендуем разработчикам обновляться до 5.6, а там уже и PHP7 не за горами. Мы нацелены на работу с PHP 7, но в тоже время рекоммендуемой версией PHP для работы сейчас является 5.6.

<h4><code>Phalcon\Mvc\Model\Validation</code> объявлен устаревшим (deprecated)</h4>
<a href="https://docs.phalconphp.com/en/latest/reference/models.html#validating-data-integrity"><code>Phalcon\Mvc\Model\Validation</code></a> уступил место в пользу <a href="https://docs.phalconphp.com/en/latest/reference/validation.html"><code>Phalcon\Validation</code></a>. Функциональность обоих компонентов сливается в одно целое, тем самым упрощая поддержку кодовой базы.

Ранее валидация осуществлялась следующим образом:

<source lang="php">
namespace Invo\Models;

use Phalcon\Mvc\Model;
use Phalcon\Mvc\Model\Validator\Email as EmailValidator;
use Phalcon\Mvc\Model\Validator\Uniqueness as UniquenessValidator;

class Users extends Model
{
    public function validation()
    {
        $this->validate(
            new EmailValidator(
                [
                    'field' => 'email',
                ]
            )
        );

        $this->validate(
            new UniquenessValidator(
                [
                    'field'   => 'username',
                    'message' => 'Sorry, That username is already taken',
                ]
            )
        );

        if ($this->validationHasFailed() == true) {
            return false;
        }
    }
}
</source>
С введением <a href="https://docs.phalconphp.com/en/latest/reference/validation.html"><code>Phalcon\Validation</code></a>, вам необходимо будет изменить вышеуказанный код:

<source lang="php">
namespace Invo\Models;

use Phalcon\Mvc\Model;
use Phalcon\Validation;
use Phalcon\Validation\Validator\Email as EmailValidator;
use Phalcon\Validation\Validator\Uniqueness as UniquenessValidator;

class Users extends Model
{
    public function validation()
    {
        $validator = new Validation();

        $validator->add(
            'email',
            new EmailValidator()
        );

        $validator->add(
            'username',
            new UniquenessValidator(
                [
                    'message' => 'Sorry, That username is already taken',
                ]
            )
        );

        return $this->validate();
    }
}
</source>
Согласитесь, это изменение делает код намного читабельнее.

<h4>Изменения в конструкторе <code>Phalcon\Mvc\Model</code></h4>
Конструктор модели классов был изменен, чтобы позволить вам передавать массив данных для инициализации:

<source lang="php">
$customer = new Customer(
    [
        'name'   => 'Peter',
        'status' => 'Active',
    ]
);
</source>
Использование этого метода является аналогом <code>assign()</code>, т.е. будет использоваться доступный сеттер (реализованный в конкретной модели или встроенный) для присваивания свойства.

<h4><code>Phalcon\Mvc\View</code> поддерживает несколько директорий представлений</h4>
Это была одна из фич, о которой наше сообщество просило множество раз. Рады сообщить, что теперь вы можете использовать любой вид иерархии при указании директорий с представлениями. Особенно это полезно для повторного использования в нескольких модулях:

<source lang="php">
use Phalcon\Mvc\View;

// ...

$di->set(
    'view',
    function () {

        $view = new View();

        $view->setViewsDir(
            [
                '/var/www/htdocs/blog/modules/backend/views/',
                '/var/www/htdocs/blog/common/views/',
            ]
        );

        return $view;
    }
);
</source>
<h4><code>Phalcon\Mvc\View</code> теперь поддерживает абсолютные пути</h4>
Абсолютный путь теперь может быть использован в <code>Mvc\View::setLayoutsDir</code> и <code>Mvc\View::setPartialsDir</code>. Это позволяет использовать папки за пределами основной директории представления.

<source lang="php">
use Phalcon\Mvc\View;

// ...

$di->set(
    'view',
    function () {

        $view = new View();

        $view->setViewsDir(
            [
                '/var/www/htdocs/blog/modules/backend/views/',
                '/var/www/htdocs/blog/common/views/',
            ]
        );

        $view->setLayoutsDir(
            '/var/www/htdocs/common/views/layouts/'
        );

        return $view;
    }
);
</source>
<h4><code>Phalcon\Di</code> теперь привязан к замыканиям сервисов</h4>
В прошлом мы должны были передавать контейнер зависимостей внутрь замыкания сервиса, если необходимо было выполнять некоторые действия внутри. Например, для доступа к конфигу или к event-менеджеру. Теперь мы можем использовать <code>$this</code>, чтобы получить доступ к <code>Phalcon\Di</code>, а также к уже зарегистрированным сервисам.

Код раньше:

<source lang="php">
use Phalcon\Mvc\Dispatcher;

// ...

$di->set(
    'dispatcher',
     function () use ($di) {
        $eventsManager = $di->getEventsManager();

        $eventsManager->attach(
            'dispatch:beforeException',
            new NotFoundPlugin()
        );

        $dispatcher = new Dispatcher;
        $dispatcher->setEventsManager($eventsManager);

        return $dispatcher;
    }
);
</source>
Теперь вы можете получить доступ к сервисам без передачи <code>$di</code>:

<source lang="php">
use Phalcon\Mvc\Dispatcher;

// ...

$di->set(
    'dispatcher',
    function () {
        $eventsManager = $this->getEventsManager();

        $eventsManager->attach(
            'dispatch:beforeException',
            new NotFoundPlugin()
            );

        $dispatcher = new Dispatcher;
        $dispatcher->setEventsManager($eventsManager);
        return $dispatcher;
    }
);
</source>
<h4>Разрешено переопределение сервисов</h4>
Если объект возвращается после события <code>beforeServiceResolve</code> в <code>Phalcon\Di</code>, возвращенный экземпляр переопределяет значение сервиса по умолчанию.

В следующем примере показано как переопределить создание сервиса <code>response</code> из своего плагина:

<source lang="php">
use Phalcon\Di;
use Phalcon\Http\Response;
use Phalcon\Events\Manager;

use MyApp\Plugins\ResponseResolverInterceptor;

$di = new Di();

$eventsManager = new EventsManager;

// Intercept service creation
$eventsManager->attach(
    'di',
    new ResponseResolverInterceptor()
);

$di->set('response', Response::class);

$di->setInternalEventsManager($eventsManager);
</source>
С помощью плагинов можно перехватывать создание сервисов:

<source lang="php">
namespace MyApp\Plugins;

use Phalcon\Http\Response;

class ResponseResolverInterceptor
{
    private $cache = false;

    public function beforeServiceResolve($event, $di, $parameters)
    {
        // Intercept creation of responses
        if ($parameters['name'] == 'response' && $this->cache == false) {
            $response = new Response();
            $response->setHeader('Cache-Control', 'no-cache, must-revalidate');

            return $response;
        }
    }
}
</source>
<h4>Отключение представления из метода <code>action</code></h4>
Иногда существует необходимость выключить представление путем вызова <code>$this->view->disable()</code> в рамках конкретного <code>action</code>-метода контроллера во избежание дальнейшей обработки результата компонентом <code>Phalcon\Mvc\View</code>.

Это стало гораздо проще; просто верните <code>false</code>:

<source lang="php">
use Phalcon\Mvc\Controller;

class Api extends Controller
{
    public function loginAction()
    {
        if ($this->safeApp->isBanned()) {
            $this->response->setStatusCode(401, "Unauthorized");
            return false;
        }

        // ...
    }
}
</source>
<h4>Возврат строки делает ее телом ответа</h4>
Возврат строки из действия контроллера воспринимается в качестве тела ответа:
(также как <code>return $this->response->setContent('Hello world')</code>)

<source lang="php">
use Phalcon\Mvc\Controller;

class Session extends Controller
{
    public function welcomeAction()
    {
        return '<h1>Hello world!</h1>';
    }
}
</source>
Особенно удобно, если <code>Phalcon\Mvc\View\Simple</code> используется вместо <code>Phalcon\Mvc\View</code>:

<source lang="php">
use Phalcon\Mvc\Controller;

class Session extends Controller
{
    public function welcomeAction($name)
    {
        return $this->view->render(
            'welcome/index',
            [
                'name' => $name,
            ]
        );
    }
}
</source>
Эта функция также доступна в обработчиках <code>Mvc\Micro</code>:

<source lang="php">
use Phalcon\Mvc\Micro;

$app = new Micro();

// ...

$app->get(
    '/hello/{name}',
    function () {
        return $this->view->render(
            'hello',
            [
                'name' => $name,
            ]
        );
    }
);
</source>
<h4>Переопределение поведения диспетчера+представления в маршрутах</h4>
Маршрутам теперь можно назначать коллбеки, которые могут переопределять поведение по умолчанию у диспетчера и представления:

<source lang="php">
// Make a redirection if the /help route is matched
$router->add('/help', [])->match(function () {
    return $this->getResponse()->redirect('https://support.google.com/');
});

// Return a string directly from the route
$router->add('/', [])->match(function () {
    return '<h1>It works</h1>';
});
</source>
Читайте полный список изменений Phalcon 2.1 в <a href="https://github.com/phalcon/cphalcon/blob/2.1.x/CHANGELOG.md#210-2015-xx-xx">CHANGELOG</a>.

<h4>Помощь с тестированием</h4>
Данная версия может быть установлена из ветки <code>2.1.х</code>. Если у вас нет Zephir, выполните следующие команды:

<source lang="bash">
git clone https://github.com/phalcon/cphalcon
git checkout 2.1.x
cd cphalcon/ext
sudo ./install
</source>
Если же у вас установлен Zephir:

<source lang="bash">
git clone https://github.com/phalcon/cphalcon
cd cphalcon/
git checkout 2.1.x
zephir build
</source>
Мы надеемся, что вам понравятся эти улучшения и дополнения. Приглашаем Вас поделиться своими мыслями и вопросами об этой версии на <a href="https://forum.phalconphp.com/">Phosphorum</a>.

<3 Команда Phalcon